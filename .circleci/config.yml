version: 2
jobs:
  build:
    docker:
    - image: quay.io/pantheon-public/build-tools-ci:nodejs
    ##- image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
    working_directory: ~/cwidahocc/d8cwi
    environment:
      TZ: "/usr/share/zoneinfo/America/Boise"
      TERM: dumb
      BUILD_TOOLS_VERSION: ^1
      NOTIFY: scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts

    shell: /bin/bash --login
    steps:
      - checkout
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          name: Setup interpolating environment variables
          command: |
            echo 'export CIRCLE_ENV="ci-$CIRCLE_BUILD_NUM"' >> $BASH_ENV;
            echo 'export PR_ENV="${CIRCLE_BRANCH:+pr-$CIRCLE_BRANCH}"' >> $BASH_ENV;
            echo 'export DEFAULT_ENV="$(echo ${PR_ENV:-$CIRCLE_ENV} | tr '[:upper:]' '[:lower:]' | sed 's/[^0-9a-z-]//g' | cut -c -11 | sed 's/-$//')"' >> $BASH_ENV;
            echo 'export TERMINUS_ENV="${TERMINUS_ENV:-$DEFAULT_ENV}"' >> $BASH_ENV;
            echo 'export PATH="$PATH:~/bin:tests/scripts"' >> $BASH_ENV;
            ##echo 'export PATH="/opt/circleci/nodejs/v6.1.0/bin:$PATH:~/bin:tests/scripts"' >> $BASH_ENV; ##use with full Ubuntu VM
      - run:
          name: Checking Versions and Variables
          command: |
            printenv
            node --version
            npm --version
      - run:
          name: Known Hosts
          command: |
            echo "Host *.drush.in" >> /etc/ssh/ssh_config
            echo "  StrictHostKeyChecking no" >> /etc/ssh/ssh_config
          ## Remove this once ssh_known_hosts: *.drush.in will work with the wildcard
      - run: 
          name: TimeZone and Sudo
          command: |
            echo ''America/Boise'' | sudo tee -a /etc/timezone;
            sudo dpkg-reconfigure -f noninteractive tzdata;
            ##sudo service mysql restart;
            ##sudo service postgresql restart;
      - run: 
          name: PHP Set
          command: |
            ##sudo ln -fs $HOME/.phpenv/versions/7.0.11/libexec/apache2/libphp5.so /usr/lib/apache2/modules/libphp5.so
            ## phpenv global 7.0.11 2>/dev/null
            php -v
      - run: 
          name: Echo stuff
          command: |
            echo "Begin build for $CIRCLE_ENV${PR_ENV:+ for }$PR_ENV. Pantheon test environment is $TERMINUS_SITE.$TERMINUS_ENV"
      - run:
          name: Git Setup 
          command: |
            if [ -n "$GITHUB_TOKEN" ] ; then
              composer -n config --global github-oauth.github.com $GITHUB_TOKEN
            fi
            git config --global user.email "$GIT_EMAIL"
            git config --global user.name "Circle CI"
            git config --global core.fileMode false
      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
      - restore_cache:
          keys:
            - terminus-install-1.8.0
      - restore_cache:
          keys:
            - particle-cache-{{ checksum "web/themes/particle/package-lock.json" }}
      - run:
          name: Composer Dependancies
          command: |
            composer -n global require -n "hirak/prestissimo:^0.3"
      - run:
          name: Terminus Setup
          command: |
            /usr/bin/env COMPOSER_BIN_DIR=$HOME/bin composer -n --working-dir=$HOME require pantheon-systems/terminus "^1"
            terminus -n --version
            /usr/bin/env COMPOSER_BIN_DIR=$HOME/bin composer -n --working-dir=$HOME require drush/drush "^8"
            mkdir -p ~/.terminus/plugins
            composer -n create-project -d ~/.terminus/plugins pantheon-systems/terminus-build-tools-plugin:$BUILD_TOOLS_VERSION
            composer -n create-project -d ~/.terminus/plugins pantheon-systems/terminus-secrets-plugin:^1
      - run:
          name: Terminus authorization
          command: |
            terminus -n auth:login --machine-token="$TERMINUS_TOKEN"
            terminus -n build:env:delete:pr "$TERMINUS_SITE" --yes
      - run: 
          name: Composer Build
          command: composer -n build-assets
      - run:
          name: NODE Version - Double Check
          command: |
            npm -v
            echo $PATH
            ##echo 'export PATH="/opt/circleci/nodejs/v6.1.0/bin:$PATH:~/bin:tests/scripts"' >> $BASH_ENV;
            ##echo $PATH
            ##npm -v
      - run:
          name: Particle Build
          command: |
            cd ~/cwidahocc/d8cwi/web/themes/particle
            npm install
            npm run setup
            npm run build:drupal
            npm run build:pl

      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
          - $HOME/.composer/cache

      - save_cache:
          key: particle-cache-{{ checksum "web/themes/particle/package-lock.json" }}
          paths:
          - web/themes/particle/node_modules

      - save_cache:
          key: terminus-install-1.8.0
          paths:
          - $(TERMINUS_PLUGINS_DIR:-~/.terminus/plugins)

      - run: 
          name: Pantheon environment Build
          command: |
            terminus -n env:wake "$TERMINUS_SITE.dev"
            terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --clone-content --db-only --notify="$NOTIFY"
            terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- updatedb -y
      - run: 
          name: Pantheon Import
          command: |
            [ ! -f "config/system.site.yml" ] || terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- config-import --yes
            # Optional: replace lines above with lines below to re-install Drupal for every test.
            # - terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --notify="$NOTIFY"
            # - terminus -n build:env:install "$TERMINUS_SITE.$TERMINUS_ENV" --site-name="$TEST_SITE_NAME" --account-mail="$ADMIN_EMAIL" --account-pass="$ADMIN_PASSWORD"
            # If there are any exported configuration files, then import them
            if [ -f "config/system.site.yml" ] ; then
              terminus -n drush "$TERMINUS_SITE.dev" -- config-import --yes
            fi
      - run:
          name: behat
          command: run-behat
      - run: terminus -n secrets:set "$TERMINUS_SITE.$TERMINUS_ENV" token "$GITHUB_TOKEN" --file='github-secrets.json' --clear --skip-if-empty
  deploy:
    docker:
    - image: quay.io/pantheon-public/build-tools-ci:nodejs
    ##- image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
    working_directory: ~/cwidahocc/d8cwi
    environment:
      TZ: "/usr/share/zoneinfo/America/Boise"
      TERM: dumb
      BUILD_TOOLS_VERSION: ^1
      NOTIFY: scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts

    shell: /bin/bash --login
    steps:
      - checkout
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          name: Setup interpolating environment variables
          command: |
            echo 'export CIRCLE_ENV="ci-$CIRCLE_BUILD_NUM"' >> $BASH_ENV;
            echo 'export PR_ENV="${CIRCLE_BRANCH:+pr-$CIRCLE_BRANCH}"' >> $BASH_ENV;
            echo 'export DEFAULT_ENV="$(echo ${PR_ENV:-$CIRCLE_ENV} | tr '[:upper:]' '[:lower:]' | sed 's/[^0-9a-z-]//g' | cut -c -11 | sed 's/-$//')"' >> $BASH_ENV;
            echo 'export TERMINUS_ENV="${TERMINUS_ENV:-$DEFAULT_ENV}"' >> $BASH_ENV;
            echo 'export PATH="$PATH:~/bin:tests/scripts"' >> $BASH_ENV;
            ##echo 'export PATH="/opt/circleci/nodejs/v6.1.0/bin:$PATH:~/bin:tests/scripts"' >> $BASH_ENV; ##use with full Ubuntu VM
      - run:
          name: Checking Versions
          command: |
            node --version
            npm --version
      - run:
          name: Known Hosts
          command: |
            echo "Host *.drush.in" >> /etc/ssh/ssh_config
            echo "  StrictHostKeyChecking no" >> /etc/ssh/ssh_config
          ## Remove this once ssh_known_hosts: *.drush.in will work with the wildcard
      - run:
          name: TimeZone and Sudo
          command: |
            echo ''America/Boise'' | sudo tee -a /etc/timezone;
            sudo dpkg-reconfigure -f noninteractive tzdata;
            ##sudo service mysql restart;
            ##sudo service postgresql restart;
      - run:
          name: PHP Set
          command: |
            ##sudo ln -fs $HOME/.phpenv/versions/7.0.11/libexec/apache2/libphp5.so /usr/lib/apache2/modules/libphp5.so
            ## phpenv global 7.0.11 2>/dev/null
            php -v
      - run:
          name: Echo stuff
          command: |
            echo "Begin build for $CIRCLE_ENV${PR_ENV:+ for }$PR_ENV. Pantheon test environment is $TERMINUS_SITE.$TERMINUS_ENV"
      - run:
          name: Git Setup
          command: |
            if [ -n "$GITHUB_TOKEN" ] ; then
              composer -n config --global github-oauth.github.com $GITHUB_TOKEN
            fi
            git config --global user.email "$GIT_EMAIL"
            git config --global user.name "Circle CI"
            git config --global core.fileMode false
      - restore_cache:
          keys:
          - composer-cache-{{ checksum "composer.lock" }}
      - restore_cache:
          keys:
          - terminus-install
      - run:
          name: Composer Dependancies
          command: |
            composer -n global require -n "hirak/prestissimo:^0.3"
      - run:
          name: Terminus Setup
          command: |
            /usr/bin/env COMPOSER_BIN_DIR=$HOME/bin composer -n --working-dir=$HOME require pantheon-systems/terminus "^1"
            terminus -n --version
            /usr/bin/env COMPOSER_BIN_DIR=$HOME/bin composer -n --working-dir=$HOME require drush/drush "^8"
            mkdir -p ~/.terminus/plugins
            composer -n create-project -d ~/.terminus/plugins pantheon-systems/terminus-build-tools-plugin:$BUILD_TOOLS_VERSION
            composer -n create-project -d ~/.terminus/plugins pantheon-systems/terminus-secrets-plugin:^1
      - run:
          name: Terminus authorization
          command: |
            terminus -n auth:login --machine-token="$TERMINUS_TOKEN"
            terminus -n build:env:delete:pr "$TERMINUS_SITE" --yes
      - run:
          name: Composer Build
          command: composer -n build-assets
      - run:
          name: NODE Version - Double Check
          command: |
            npm -v
            echo $PATH
            ##echo 'export PATH="/opt/circleci/nodejs/v6.1.0/bin:$PATH:~/bin:tests/scripts"' >> $BASH_ENV;
            ##echo $PATH
            ##npm -v
      - run:
          name: Particle Build
          command: |
            cd ~/cwidahocc/d8cwi/web/themes/particle
            npm install
            npm run setup
            npm run build:drupal
            npm run build:pl

      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
          - $HOME/.composer/cache

      - save_cache:
          key: terminus-install
          paths:
          - $(TERMINUS_PLUGINS_DIR:-~/.terminus/plugins)

      - run:
          name: Pantheon environment Build
          command: |
            terminus -n env:wake "$TERMINUS_SITE.dev"
            terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --clone-content --db-only --notify="$NOTIFY"
            terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- updatedb -y
      - run:
          name: Pantheon Merges
          command: |
            echo "$TERMINUS_SITE.$TERMINUS_ENV";
            terminus -n env:wake "$TERMINUS_SITE.dev"

            # Merge the multidev for the PR into the dev environment
            terminus -n build:env:merge "$TERMINUS_SITE.$TERMINUS_ENV" --yes

            # Run updatedb on the dev environment
            terminus -n drush $TERMINUS_SITE.dev -- updatedb --yes

            # If there are any exported configuration files, then import them
            if [ -f "config/system.site.yml" ] ; then
              terminus -n drush "$TERMINUS_SITE.dev" -- config-import --yes
            fi

            # Delete old multidev environments associated with a PR that has been
            # merged or closed.
            terminus -n build:env:delete:pr "$TERMINUS_SITE" --yes
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master